
### Задача 7. Объединение объектов с использованием вычисляемых свойств

**Описание:**  
Создайте функцию `mergeObjects(obj1, obj2)`, которая:

1. Принимает два объекта.
2. Объединяет их так, чтобы в итоговом объекте свойства из `obj2` не перезаписывали свойства из `obj1`.
3. Если в `obj1` отсутствует свойство, присутствующее в `obj2`, добавьте его с использованием вычисляемого свойства (например, если ключ — динамический).
4. Верните итоговый объект и выведите его в консоль.

_Подсказка:_  
Используйте цикл по ключам объектов и оператор `in` для проверки наличия свойства.

---


### Задача 7. Сложные логические условия с группировкой

**Описание:**  
Напишите функцию `checkValue(value)`, которая проверяет значение по следующим условиям:

1. Если значение — число от 10 до 100 (включительно) и чётное, функция возвращает `"Чётное число в диапазоне"`.
2. Если значение — строка, длина которой больше 5, функция возвращает `"Длинная строка"`.
3. Если значение — булев тип и равно `true`, функция возвращает `"Истина"`.
4. В остальных случаях функция возвращает `"Неопределённое значение"`.  
   Используйте группировку условий, логические операторы `&&`, `||` и инвертирование (если необходимо).  
   Выведите результаты вызова функции с различными значениями.

_Подсказка:_  
Продумайте порядок проверок и используйте конструкцию `if-else if-else`.

---


### Задача 7. Фильтрация объекта по ключам

**Описание:**  
Создайте объект с произвольными свойствами (например, имя, возраст, город, страна, профессия).

1. Создайте массив с «разрешёнными» ключами (например, `["name", "age", "city"]`).
2. Напишите функцию, которая принимает объект и массив ключей, а затем возвращает новый объект, в котором присутствуют только свойства с ключами из разрешённого списка.
3. Выведите новый объект в консоль.

_Подсказка:_  
Используйте цикл по ключам объекта и оператор `in` или метод `hasOwnProperty`.

---

### Задача 10. Использование оператора остатка от деления и условий

**Описание:**  
Напишите функцию `filterEvenNumbers(arr)`, которая принимает массив чисел, а затем:

1. Фильтрует элементы, оставляя только те, которые дают остаток 0 при делении на 2 (то есть, чётные числа).
2. Если массив содержит меньше трёх чётных чисел, функция должна вернуть сообщение `"Недостаточно чётных чисел"`.
3. Иначе функция возвращает новый массив с отфильтрованными значениями.  
   Выведите результаты работы функции для нескольких массивов.

_Подсказка:_  
Используйте оператор `%` для проверки остатка и метод `filter` для фильтрации массива.

---

Эти задачи позволят закрепить навыки работы с массивами, объектами, условными конструкциями и логическими операторами в JavaScript, а также помогут глубже понять особенности языка на разных уровнях сложности.
